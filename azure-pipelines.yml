trigger:
- master

pool:
  vmImage: 'windows-latest'

stages:
- stage: Build
  variables:
    solution: 'src/PokerLeagueManager.sln'
    buildPlatform: 'Any CPU'
    buildConfiguration: 'Release'
    MajorVersion: '0'
    MinorVersion: '1'
    
  jobs:
  - job: Build
    steps:
    - task: PowerShell@2
      displayName: 'Version Assemblies'
      inputs:
        filePath: ./deploy/VersionAssemblies.ps1
        arguments: '-MajorVersion $(MajorVersion) -MinorVersion $(MinorVersion) -BuildNumber $(Build.BuildNumber) -SourcesDir $(Build.SourcesDirectory) -Verbose'

    - task: SonarCloudPrepare@1
      displayName: 'Prepare analysis on SonarCloud'
      inputs:
        SonarCloud: SonarCloud
        organization: 'dylan-smith41309'
        projectKey: pokerleaguemanager
        projectName: PokerLeagueManager

    - task: NuGetToolInstaller@1
      displayName: 'Setup NuGet'

    - task: NuGetCommand@2
      displayName: 'NuGet Restore'
      inputs:
        restoreSolution: '$(solution)'

    - task: Cache@2
      displayName: Cache npm
      inputs:
        key: 'node_modules | "$(Agent.OS)" | src/PokerLeagueManager.UI.Web/angular/package-lock.json'
        path: src/PokerLeagueManager.UI.Web/angular/node_modules
        cacheHitVar: CACHE_RESTORED

    - task: Npm@1
      displayName: npm ci
      condition: ne(variables.CACHE_RESTORED, 'true')
      inputs:
        command: 'ci'
        workingDir: 'src/PokerLeagueManager.UI.Web/angular'

    - task: BatchScript@1
      displayName: 'Generate Typescript Lib'
      inputs:
        filename: src/PokerLeagueManager.UI.Web/GenerateTypeScript.bat

    - task: Npm@1
      displayName: Build Angular
      inputs:
        command: 'custom'
        workingDir: 'src/PokerLeagueManager.UI.Web/angular'
        customCommand: 'run build-prod'

    - task: PowerShell@2
      displayName: Create index.cshtml
      inputs:
        filePath: 'deploy/TransformIndex.ps1'
        arguments: '-SourcePath $(Build.SourcesDirectory)/src/PokerLeagueManager.UI.Web/angular/dist/index.html -TargetPath $(Build.SourcesDirectory)/src/PokerLeagueManager.UI.Web/angular/dist/index.cshtml'
        failOnStderr: true
        workingDirectory: '$(Build.SourcesDirectory)/src/PokerLeagueManager.UI.Web'

    - task: Npm@1
      displayName: 'Run Jasmine Tests'
      inputs:
        command: custom
        workingDir: src/PokerLeagueManager.UI.Web/angular
        customCommand: 'run test-prod'

    - task: PublishTestResults@2
      displayName: 'Publish jasmine test results'
      inputs:
        testResultsFiles: '$(Build.SourcesDirectory)/src/PokerLeagueManager.UI.Web/angular/KarmaTestResults/**/test.xml'
        mergeTestResults: true
        testRunTitle: 'Jasmine Tests'
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish jasmine code coverage'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(Build.SourcesDirectory)/src/PokerLeagueManager.UI.Web/angular/coverage/cobertura-coverage.xml'
        failIfCoverageEmpty: true

    - task: VSBuild@1
      displayName: 'Build Solution'
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:TreatWarningsAsErrors=true /p:CodeAnalysisRuleSet="../PokerLeagueManager.ruleset" /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:ValidateArchitecture=true'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
        clean: true

    - task: VSTest@2
      displayName: 'Run Unit Tests'
      inputs:
        testAssemblyVer2: |
          **\*.Tests.dll
          !**\obj\**
        runInParallel: true
        codeCoverageEnabled: false
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        diagnosticsEnabled: True

    - task: SonarCloudAnalyze@1
      displayName: 'Run Code Analysis'

    - task: SonarCloudPublish@1
      displayName: 'Publish Analysis Result'

    - task: CopyFiles@2
      displayName: 'Copy DB.EventStore to Drop'
      inputs:
        SourceFolder: '$(build.SourcesDirectory)/db/EventStore'
        TargetFolder: '$(build.StagingDirectory)/DB.EventStore'

    - task: CopyFiles@2
      displayName: 'Copy DB.QueryStore to Drop'
      inputs:
        SourceFolder: '$(build.SourcesDirectory)/db/QueryStore'
        TargetFolder: '$(build.StagingDirectory)/DB.QueryStore'

    - task: CopyFiles@2
      displayName: 'Copy Commands.WebApi to Drop'
      inputs:
        SourceFolder: '$(build.SourcesDirectory)/src/PokerLeagueManager.Commands.WebApi/obj/$(BuildConfiguration)/Package'
        Contents: '*'
        TargetFolder: '$(build.StagingDirectory)/WebApi.Commands'

    - task: CopyFiles@2
      displayName: 'Copy Queries.WebApi to Drop'
      inputs:
        SourceFolder: '$(build.SourcesDirectory)/src/PokerLeagueManager.Queries.WebApi/obj/$(BuildConfiguration)/Package'
        Contents: '*'
        TargetFolder: '$(build.StagingDirectory)/WebApi.Queries'

    - task: CopyFiles@2
      displayName: 'Copy Events.WebApi to Drop'
      inputs:
        SourceFolder: '$(build.SourcesDirectory)/src/PokerLeagueManager.Events.WebApi/obj/$(BuildConfiguration)/Package'
        Contents: '*'
        TargetFolder: '$(build.StagingDirectory)/WebApi.Events'

    - task: CopyFiles@2
      displayName: 'Copy UI.Web to Drop'
      inputs:
        SourceFolder: '$(build.SourcesDirectory)/src/PokerLeagueManager.UI.Web/obj/$(BuildConfiguration)/Package'
        Contents: '*'
        TargetFolder: '$(build.StagingDirectory)/UI.Web'

    - task: CopyFiles@2
      displayName: 'Copy deploy scripts to Drop'
      inputs:
        SourceFolder: '$(build.SourcesDirectory)/deploy'
        TargetFolder: '$(build.StagingDirectory)/deploy'

    - task: CopyFiles@2
      displayName: 'Copy Utilities to Drop'
      inputs:
        SourceFolder: '$(build.SourcesDirectory)/src/PokerLeagueManager.Utilities/bin/$(BuildConfiguration)'
        TargetFolder: '$(build.StagingDirectory)/Deploy/Utilities'

    - publish: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Publish Artifacts'
      artifact: drop
      condition: succeededOrFailed()

- stage: DeployToTest
  displayName: 'Deploy to Test'
  variables:
    QueryApi: 'Queries-PokerLeagueManager-Test'
    CommandApi: 'Commands-PokerLeagueManager-Test'
    EventApi: 'Events-PokerLeagueManager-Test'
    UIWebsite: 'PokerLeagueManager-Test'
    SqlServerName: 'PokerLeagueManager-Test.database.windows.net'
    SqlUser: 'PokerLeagueManager'
    EventDatabase: 'EventStore'
    QueryDatabase: 'QueryStore'
    SampleGameCount: 50
    
  jobs:
  - deployment: DeployToTest
    displayName: 'Deploy To Test'
    environment: 'Test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Query API'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure RM - MVP'
              appType: 'webApp'
              WebAppName: '$(QueryApi)'
              packageForLinux: '$(Pipeline.Workspace)/drop/WebApi.Queries/PokerLeagueManager.Queries.WebApi.zip'
              enableCustomDeployment: true
              DeploymentType: 'webDeploy'
              RemoveAdditionalFilesFlag: true

          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Commands API'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure RM - MVP'
              appType: 'webApp'
              WebAppName: '$(CommandApi)'
              packageForLinux: '$(Pipeline.Workspace)/drop/WebApi.Commands/PokerLeagueManager.Commands.WebApi.zip'
              enableCustomDeployment: true
              DeploymentType: 'webDeploy'
              RemoveAdditionalFilesFlag: true

          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Events API'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure RM - MVP'
              appType: 'webApp'
              WebAppName: '$(EventApi)'
              packageForLinux: '$(Pipeline.Workspace)/drop/WebApi.Events/PokerLeagueManager.Events.WebApi.zip'
              enableCustomDeployment: true
              DeploymentType: 'webDeploy'
              RemoveAdditionalFilesFlag: true

          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Website'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure RM - MVP'
              appType: 'webApp'
              WebAppName: '$(UIWebsite)'
              packageForLinux: '$(Pipeline.Workspace)/drop/UI.Web/PokerLeagueManager.UI.Web.zip'
              enableCustomDeployment: true
              DeploymentType: 'webDeploy'
              RemoveAdditionalFilesFlag: true

          - task: PowerShell@2
            displayName: 'Deploy EventStore DB'
            inputs:
              targetType: filePath
              filePath: '$(Pipeline.Workspace)/drop/deploy/DeployDB.ps1'
              arguments: '-DatabaseUpgradeScriptsPath "$(Pipeline.Workspace)/drop/DB.EventStore" -DatabaseServerName "$(SqlServerName)" -DatabaseName "$(EventDatabase)" -DatabaseLogin "$(SqlUser)" -DatabasePassword "$(SqlPassword)" -DropDatabase -Verbose'
              failOnStderr: true
              workingDirectory: '$(Pipeline.Workspace)/drop/deploy'

          - task: PowerShell@2
            displayName: 'Deploy QueryStore DB'
            inputs:
              targetType: filePath
              filePath: '$(Pipeline.Workspace)/drop/deploy/DeployDB.ps1'
              arguments: '-DatabaseUpgradeScriptsPath "$(Pipeline.Workspace)/drop/DB.QueryStore" -DatabaseServerName "$(SqlServerName)" -DatabaseName "$(QueryDatabase)" -DatabaseLogin "$(SqlUser)" -DatabasePassword "$(SqlPassword)" -DropDatabase -Verbose'
              failOnStderr: true
              workingDirectory: '$(Pipeline.Workspace)/drop/deploy'

          - script: 'PokerLeagueManager.Utilities.exe CreateEventSubscriber $(SqlServerName) $(EventDatabase) $(SqlUser) $(SqlPassword) http://$(EventApi).azurewebsites.net'
            displayName: 'Configure Event Subscriber'
            workingDirectory: '$(Pipeline.Workspace)/drop/deploy/Utilities'
            failOnStderr: true
            
          - script: 'PokerLeagueManager.Utilities.exe GenerateSampleData http://$(CommandApi).azurewebsites.net $(SampleGameCount)'
            displayName: 'Generate Sample Data'
            workingDirectory: '$(Pipeline.Workspace)/drop/deploy/Utilities'
            failOnStderr: true
      
- stage: DeployToProduction
  displayName: 'Deploy to Production'
  variables:
    QueryApi: 'Queries-PokerLeagueManager-Prod'
    CommandApi: 'Commands-PokerLeagueManager-Prod'
    EventApi: 'Events-PokerLeagueManager-Prod'
    UIWebsite: 'PokerLeagueManager-Prod'
    SqlServerName: 'PokerLeagueManager-Prod.database.windows.net'
    SqlUser: 'PokerLeagueManager'
    EventDatabase: 'EventStore'
    QueryDatabase: 'QueryStore'
    
  jobs:
  - deployment: DeployToProduction
    displayName: 'Deploy To Production'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Query API'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure RM - MVP'
              appType: 'webApp'
              WebAppName: '$(QueryApi)'
              packageForLinux: '$(Pipeline.Workspace)/drop/WebApi.Queries/PokerLeagueManager.Queries.WebApi.zip'
              enableCustomDeployment: true
              DeploymentType: 'webDeploy'
              RemoveAdditionalFilesFlag: true

          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Commands API'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure RM - MVP'
              appType: 'webApp'
              WebAppName: '$(CommandApi)'
              packageForLinux: '$(Pipeline.Workspace)/drop/WebApi.Commands/PokerLeagueManager.Commands.WebApi.zip'
              enableCustomDeployment: true
              DeploymentType: 'webDeploy'
              RemoveAdditionalFilesFlag: true

          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Events API'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure RM - MVP'
              appType: 'webApp'
              WebAppName: '$(EventApi)'
              packageForLinux: '$(Pipeline.Workspace)/drop/WebApi.Events/PokerLeagueManager.Events.WebApi.zip'
              enableCustomDeployment: true
              DeploymentType: 'webDeploy'
              RemoveAdditionalFilesFlag: true

          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Website'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Azure RM - MVP'
              appType: 'webApp'
              WebAppName: '$(UIWebsite)'
              packageForLinux: '$(Pipeline.Workspace)/drop/UI.Web/PokerLeagueManager.UI.Web.zip'
              enableCustomDeployment: true
              DeploymentType: 'webDeploy'
              RemoveAdditionalFilesFlag: true

          - task: PowerShell@2
            displayName: 'Deploy EventStore DB'
            inputs:
              targetType: filePath
              filePath: '$(Pipeline.Workspace)/drop/deploy/DeployDB.ps1'
              arguments: '-DatabaseUpgradeScriptsPath "$(Pipeline.Workspace)/drop/DB.EventStore" -DatabaseServerName "$(SqlServerName)" -DatabaseName "$(EventDatabase)" -DatabaseLogin "$(SqlUser)" -DatabasePassword "$(SqlPassword)" -Verbose'
              failOnStderr: true
              workingDirectory: '$(Pipeline.Workspace)/drop/deploy'

          - task: PowerShell@2
            displayName: 'Deploy QueryStore DB'
            inputs:
              targetType: filePath
              filePath: '$(Pipeline.Workspace)/drop/deploy/DeployDB.ps1'
              arguments: '-DatabaseUpgradeScriptsPath "$(Pipeline.Workspace)/drop/DB.QueryStore" -DatabaseServerName "$(SqlServerName)" -DatabaseName "$(QueryDatabase)" -DatabaseLogin "$(SqlUser)" -DatabasePassword "$(SqlPassword)" -Verbose'
              failOnStderr: true
              workingDirectory: '$(Pipeline.Workspace)/drop/deploy'